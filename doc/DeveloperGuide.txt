Throopi the Roboscope - developer guide
=======================================

Scope class
===========

Properties:

X  - The current X position of the stage
Y  - The current Y position of the stage
Z  - The current Z position of the stage
Channel -  The current filter configuration, as defined by MMC config file 
exposure  -  The camera exposure time (ms) 
width  -  Image width in pixels  - READONLY
height  -  Image height in pixels - READONLY
bitdepth  - Image bitdepth (2^n)  - READONLY
rootFolder  -  Where to save all the images. 
pixelsize   -  Current pixel size  - READONLY
Objective   -  Current Optics configuration. Defiened as objective + multiplier, basically any combination that determines the pixel size). 
focusMethod - currently only ASI, in the future will suport other (FPGA, software, PFS, etc.) 
stageBusy   - a flag to say if Stage is busy - READONLY
NumberOfTasks - number of tasks (also returns their priorities - READONLY
currnetTaskID - current task ID (does not update the field! use getNewTaskIDs for new IDs)
lastImage - an adjusted last image based on its OME specs.  - READONLY
isRunning - a 1/0 status flag to say if its currently runnint
TaskSchedule - a nx2 matrix of planned task execution time
stageSpeed - the stage speed (in the same units as everything else...)

%% the following are properties that any future focus methods will need to support
%% to allow modularity, get/set will use private methods getFocusParam/setFocusParame

focusSearchDirection - UP / DOWN / SPLIT
focusSpeed  - percent of maximal stage speed (1-100). 
focusRange  - the range to look atm in 0.1 micron units. 
focusUseHillDetect - a 1/0 flag that says whther to stop detection after the hill pick 
focusHillDetectHeight - percent after the pick to stop in...  
focusScore  -  The current focus score of the images - READONLY
focusTime   -  Estiamted time it will take to focus based on current parameters - READONLY

Methods:

Scope (constructor) 
set       - set properties, see above list
get       - get properties, see above list
display   - command line status of devices
unload    - unload devices from MMC, should always be called at the end, a destructor. 
acqImg    - acquires image based on rS properties
autofocus - perform autofocus using current focus method and its currnet settings

%% Need to write (until END): 

updateTasksExecutionTimes
updateTaskScheduale
addTasks
getTasks  - signature: getTasks(rS,idx) where idx could be 'next','last','all', of numerical vector of indexes. 
removeTask
plotProgress - a highly customizable progress report on all 
run - do all tasks one by one according to schedule. 
getNewTaskIDs

% GUI related methods
plotXYprogress
showLastImage
showProgressBar
showControler

%% END 

Private methods:
-----------------
cmdStg
setFocusParams
getFocusParams



Class MetaData
===============

Properties:

project.name
dataset.name
image.name
objective
experimenter
experiment
pixelsizex
pixelsizey
pixelsizez
stage.x
stage.y
stage.z
channels
creationdate
display.r
display.g
display.b
display.r_levels
display.g_levels
display.b_levels
display.gray
display.gray_levels
dimension_order
sizex
sizey
sizez
sizet
sizec
firstt
firstc
firstz
dt


Methods:

MetaData
get
set
display
writeTiff
readTiff
show


Class Task
============

Properties: 

id - Integer, required for the constructor. 
runTime - Will be implemented by two fields: stageTime, imgTime, where runTime=stageTime+imgTime. 
X - x position for this task (in micron)
Y - y position for this task (in micron)
MetaData - for an image to be captured, could be empty if tasks does not require an image to be taken. 
Priority - 1 lowest, must be positive integer. 
Fcn  - a function handle for what to do once method doTask is called.  
dependencies - array nx2 of dependencies, each row has: Task id number and delay. 
               Important! only dependencies within the sam priority will be considered. 
UserData - (optional) additional data for the task that could be then accessed by any TaskFcn. 
executed - a binary flag to say if task already been executed

Methods:
Task - Constructor, will have a way to define based on MetaData
do - 
get - 



Other non class important interfaces / conventions: 
===================================================

Stage interface:
================
Currently stage is 'hard wired' e.g. all interaction are happening using 
ascii serial port commants. To make it more flexible a single function 
cmdStg is responssible to all the serial calls and their interpertation.
cmdStg is private method of rS to minimize its exposure. 
Any future implmentation will need to perserve these capabilities: 

[ok,arg]=cmdStg(rS,cmd,param)

ok - is a 1/0 answer to note if the command/query was completed successfuly. 
arg - is the answer to the query, if its a command and not a query return value is ''

cmd could be:

move/moverel - requires param to be an array of structs with fields 
where  -  
zero - reset the X,Y,Z to be zeros 
fcsscr
getfocusparam
setfocusspeed
setfocusrange
setfocushillheight
autofocus
getstatus


Focus Methodology: 
==================
No matter what the focus method is (Hardware, software, laser, ...) 
it should supply the Scope object with several properties. These properties
are set/get using special private function. 

Any addition of focusing method should provide similar properties to the Scope object. 


===========================================================================
===========================================================================

Necessary configuration files: 
==============================

Scope.cfg (or any other name you chose)
----------------------------------------
Result of the Micor-Manager wizard, however must iunclude several config groups/ labels: 

PixelSizeList.csv (Name is fixed! must be PixelSizeList)
-----------------------------------
first column is label number ala the Scope.cfg flabel defenitions
second column is the pixel size in mm for each possible optices. 

